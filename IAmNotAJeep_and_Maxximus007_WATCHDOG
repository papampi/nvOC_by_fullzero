#!/bin/bash

# Miner restart script for nvOC by fullzero , v0019.2 unofficial by papampi
# By Maxximus007 && IAmNotAJeep
# for nvOC by fullzero
source /home/m1/1bash

export DISPLAY=:0
# Creating a log file to record restarts in tmpfs
LOG_FILE="/home/m1/nvoc_logs/5_restartlog"
if [ -e "$LOG_FILE" ] ; then
  #Limit the logfile, just keep the last 2K
  echo "$(cat $LOG_FILE | grep WARNING | tail -n 2k )" > $LOG_FILE
fi

# Creating alert log file to record problems
ALERT_LOG_FILE="/home/m1/7_wdog_alertlog"
if [ -e "$ALERT_LOG_FILE" ] ; then
  #Limit the logfile, just keep the last 2K
  echo "$(cat $ALERT_LOG_FILE | grep WARNING | tail -n 2k | ts "LAST ")" > $ALERT_LOG_FILE
fi

GPU_COUNT=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
if [[ -n "$NUMBER_GPUS_INSTALLED"  ]]
then
  if [[ $GPU_COUNT -ne $NUMBER_GPUS_INSTALLED ]]
  then
    echo ""
    echo "WARNING: $(date) - We should have $NUMBER_GPUS_INSTALLED GPUs but nvidia-smi reports $GPU_COUNT" | tee -a $LOG_FILE $ALERT_LOG_FILE
    echo ""
  else
    echo ""
    echo "Installed GPUs: $NUMBER_GPUS_INSTALLED, Connected GPUs: $GPU_COUNT"
    echo ""
  fi
fi

SLEEP_TIME=$((($GPU_COUNT * 5 ) + 10 ))
MINER_PID=$(ps ax | grep -i screen | grep miner)
if  [ -z  "$MINER_PID" ]
then
  echo "$(date) - Miner not started yet, Waiting 10 more seconds" | tee -a $LOG_FILE #$ALERT_LOG_FILE
  sleep 10
  echo "$(date) - Starting miner restart script." | tee -a $LOG_FILE
else
  echo "$(date) - Starting miner restart script." | tee -a $LOG_FILE
  echo "" #| tee -a $LOG_FILE
fi

bash '/home/m1/telegram'
# Give oneBash time to start to prevent reboot
echo "$(date) - waiting $SLEEP_TIME seconds before going 'on watch'" | tee -a $LOG_FILE

sleep $SLEEP_TIME

THRESHOLD=85
RESTART=0
COUNT=$((6 * $GPU_COUNT))
#reinit=6
while true
do

  #If WTM_AUTO_SWITCH python script running time is more than 30 Sec kill it

  WTM_A_S_PID=`ps -ef | grep WTM_AUTO_SWITCH | grep -v grep |awk '{print $2}'`
  if [  $PAPAMPI_WTM_AUTO_SWITCH  ==  "YES"  ] || [ $PAPAMPI_WTM_PROFIT_INFO == "YES" ] &&  [[ -n "$WTM_A_S_PID" ]]
  then
    WTM_A_S_PID_TIME=`ps -eo pid,etimes | grep $WTM_A_S_PID | awk  '$2> 30 { print $1}'` 2>&1
    echo "WTM Auto Switch Syncing"
    if  [[ -n "$WTM_A_S_PID_TIME" ]]
    then
      echo "WARNING: $(date) - WTM python stucked, Killing it" | tee -a ${LOG_FILE} ${ALERT_LOG_FILE}
      ps -eo pid,etimes | grep `pgrep -f WTM_AUTO_SWITCH` | awk  '$2> 30 { print $1}'  | xargs kill -9
    fi
  fi


  # Delay before checking GPU status/usage
  sleep 10
  #IAmNotAJeep MOD from V002
  JEEP=0
  #IAmNotAJeep MOD from V002
  GPU=0
  REBOOTRESET=$(($REBOOTRESET + 1))

  #IAmNotAJeep MOD from V002
  echo ""
  echo "      GPU_COUNT: " $GPU_COUNT  | tee -a $LOG_FILE
  #IAmNotAJeep MOD from V002
  UTILIZATIONS=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits)
  echo ""
  echo "GPU UTILIZATION: " $UTILIZATIONS  | tee -a $LOG_FILE
  echo ""
  numtest='^[0-9]+$'
  for UTIL in $UTILIZATIONS
  do
    if ! [[ $UTIL =~ $numtest ]]
    then
      # Not numeric so: Help we've lost a GPU, so reboot
      echo "WARNING: $(date) - Lost GPU so restarting system. Found GPU's:" | tee -a $LOG_FILE $ALERT_LOG_FILE
      echo "" #| tee -a $LOG_FILE
      #Hope PCI BUS info will help find the faulty GPU
      nvidia-smi --query-gpu=gpu_bus_id --format=csv | ts "WARNING: $(date) - " |  tee -a $LOG_FILE $ALERT_LOG_FILE
      echo "WARNING: $(date) - reboot in 10 seconds"  | tee -a $LOG_FILE $ALERT_LOG_FILE
      echo ""
      bash '/home/m1/telegram'
      sleep 10
      sudo reboot
    fi

    # If utilization is lower than threshold count them:
    if [ $UTIL -lt $THRESHOLD ]
    then
      echo "WARNING: $(date) - GPU under threshold found - GPU UTILIZATION: " $UTILIZATIONS  | tee -a $LOG_FILE $ALERT_LOG_FILE
      echo ""
      COUNT=$(($COUNT - 1))
      #IAmNotAJeep MOD from V002
      JEEP=$(($JEEP + 1))
      #IAmNotAJeep MOD from V002
    fi
    GPU=$(($GPU + 1))
  done
  #IAmNotAJeep MOD from V002
  if [ $JEEP -gt 0 ]
  then
    # Look for no miner screen and get right to miner restart
    echo "Debug: JEEP=$JEEP, COUNT=$COUNT, RESTART=$RESTART"
    if [[ `screen -ls |grep miner |wc -l` -eq 0 ]]
    then
      COUNT=0
      echo "WARNING: $(date) - Found no miner, jumping to 3main restart" | tee -a $LOG_FILE $ALERT_LOG_FILE
    fi

    if [ $COUNT -le 0 ]
    then
      # Check for Internet and wait if down
      while ! nc -vzw5 google.com 80;
      do
        echo "WARNING: $(date) - Internet is down, checking again in 10 seconds..." | tee -a $LOG_FILE $ALERT_LOG_FILE
        sleep 10
      done
      echo ""
      # Check if pool:port is up or not
      if [[  $COIN == *DUAL*  ]] && [[ $COIN != *NICE* ]]
      then
        CURRENT_COIN=$( head -n 200 /home/m1/1bash | grep COIN= | sed 's/COIN=//' | sed 's/\"//' | sed 's/\"//' | sed 's/DUAL_//' | cut -d _ -f 1)
        CURRENT_COIN_POOL=$(echo {$CURRENT_COIN}_POOL |sed 's/{//' | sed 's/}//' )
        POOL_SERVER=$(cat /home/m1/1bash | grep $CURRENT_COIN_POOL | grep -o '".*"' | sed 's/"//'| sed 's/"//')
        CURRENT_COIN_PORT=$(echo {$CURRENT_COIN}_PORT | sed 's/{//' | sed 's/}//')
        PING_SERVER=$( cat /home/m1/1bash | grep $CURRENT_COIN_POOL | grep -o '".*"' | sed 's/"//'| sed 's/"//')
        PING_PORT=$(cat /home/m1/1bash | grep $CURRENT_COIN_PORT | grep -o '".*"' | sed 's/"//' |sed 's/"//')
        echo "Dual mining, check main server $PING_SERVER:$PING_PORT " # | tee -a $LOG_FILE
        if nc -vzw2 $PING_SERVER $PING_PORT;
        then
          echo "Dual mining, main pool $PING_SERVER:$PING_PORT is up"
          INTERNET_IS_GO=1
        else
          echo "WARNING: $(date) - Cant reach main pool, $PING_SERVER:$PING_PORT is DOWN" | tee -a $LOG_FILE $ALERT_LOG_FILE
          INTERNET_IS_GO=0
          RESTART=0
        fi
      else
        CURRENT_COIN=$(head -n 200 /home/m1/1bash | grep COIN= | sed 's/COIN=//' | sed 's/\"//' | sed 's/\"//')
        CURRENT_COIN_POOL=$(echo {$CURRENT_COIN}_POOL |sed 's/{//' | sed 's/}//' )
        POOL_SERVER=$(cat /home/m1/1bash | grep $CURRENT_COIN_POOL | grep -o '".*"' | sed 's/"//'| sed 's/"//')
        CURRENT_COIN_PORT=$(echo {$CURRENT_COIN}_PORT | sed 's/{//' | sed 's/}//')
        PING_SERVER=$( cat /home/m1/1bash | grep $CURRENT_COIN_POOL | grep -o '".*"' | sed 's/"//'| sed 's/"//')
        PING_PORT=$(cat /home/m1/1bash | grep $CURRENT_COIN_PORT | grep -o '".*"' | sed 's/"//' |sed 's/"//')
        echo "Check mining pool, $PING_SERVER:$PING_PORT "
        if nc -vzw2 $PING_SERVER $PING_PORT
        then
          echo "Mining pool up" #  | tee -a $LOG_FILE
          INTERNET_IS_GO=1
        else
          echo "WARNING: $(date) - Cant reach mining pool, $PING_SERVER:$PING_PORT is DOWN"   | tee -a $LOG_FILE $ALERT_LOG_FILE
          INTERNET_IS_GO=0
          RESTART=0
        fi
      fi
      if [[ $RESTART -gt 4 && $INTERNET_IS_GO == 1 ]]
      then
        echo "WARNING: $(date) - Utilization is too low: reviving did not work so restarting system in 10 seconds" | tee -a $LOG_FILE $ALERT_LOG_FILE
        echo "" #| tee -a $LOG_FILE
        bash '/home/m1/telegram'
        sleep 10
        sudo reboot
      fi
      # If miner runs in screen 'miner' kill the screen to be sure it's gone
      ps ax | grep -i screen | grep miner | grep -o 'SCREEN.*' |  ts "WARNING: $(date) - Miner command before killing it: " |  tee -a $ALERT_LOG_FILE
      echo "WARNING: $(date) - Problem found: See diagnostics below:" | tee -a $ALERT_LOG_FILE
      tail -15 /home/m1/nvoc_logs/screenlog.0 | ts "WARNING: $(date) - " | tee -a $ALERT_LOG_FILE
      echo "WARNING: $(date) - Utilization is too low: restart 3main..." | tee -a $ALERT_LOG_FILE
      bash '/home/m1/telegram'
      pkill -e miner
      # Best to restart oneBash - settings might be adjusted already
      target=$(ps -ef | awk '$NF~"3main" {print $2}')
      kill $target #| tee -a $LOG_FILE
      echo "" #| tee -a $LOG_FILE
      RESTART=$(($RESTART + 1))
      REBOOTRESET=0
      COUNT=$GPU_COUNT
      # Give oneBash time to restart to prevent reboot
      sleep $SLEEP_TIME
    else
      echo "WARNING: $(date) - Low Utilization Detected: 3main will reinit if there are 6 consecutive failures" | tee -a $LOG_FILE $ALERT_LOG_FILE
      echo ""
    fi
  else
    # All is good, reset the counter
    COUNT=$((6 * $GPU_COUNT))
    echo "$(date) - No mining issues detected."  | tee -a $LOG_FILE
  fi
  # No need for a reboot after a while
  if [ $REBOOTRESET -gt 5 ]
  then
    RESTART=0
    REBOOTRESET=0
  fi
done

