#!/bin/bash
# minerinfo written by papampi for nvOC
# Rev 0002
# Rev 0003: papampi, Some clean up and additions
# Rev 0004: papampi, Average Hash rate for zm and ethminer
# Rev 0005: LukePicci, Relocate nvOC to arbitrary install directory
# Rev 0006: papampi, More average Hash rate and reported hash rate to WTM

export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

export NVOC="$( cd "$( dirname "$SOURCE" )/../.." && pwd )"

if [[ $1 == clearalerts ]]
then
  echo "" > ${NVOC}/5_watchdoglog
  echo "" > ${NVOC}/6_autotemplog
fi

echo "Content-type: text/html"
echo ""
echo '<html>'
echo '<head>'
echo '<meta http-equiv="Content-Type" content="text/html; charset=UTF-8\n\n">'
source ${NVOC}/1bash

echo '<style>; .button {background-color: black ; border: none; color: black; padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px; margin: 4px 2px;cursor: pointer;}'
echo '</style>'

nvOC_Ver="nvOC v0019-2.1 - Community Release"
LSB_RELEASE=$(lsb_release -s -d)
UNAME=$(uname -r)

SYSTEM_BOOT_TIME=$(uptime -s)
SYSTEM_UP_TIME=$(uptime -p)
LOAD_AVERAGE=$(cat /proc/loadavg | awk '{print $1,$2,$3}')
GPU_COUNT=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
TAIL_GPU_COUNT=$(( $GPU_COUNT + 3 ))
REBOOT_REQUIRED=$( [ -f /var/run/reboot-required ]  && echo "<tt style=\"text-align:left; color:red\">"YES!!!"</tt>" || echo "No")
MINER_PID=$(pgrep -f -o  miner)
MINER_UP_TIME=$(ps -p $MINER_PID  -o etime | grep -v ELAPSED)
GPU_UTILIZATIONS=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits)
TEMP_FAN_POWER=$(tail  -50 ${NVOC}/nvoc_logs/tempcontrol-screenlog.0  | grep GPU | awk '{gsub(/:/,": ")}1' |tail -n $GPU_COUNT | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g'  | awk '{print $0,"<br>"}' )
TEMP_ALERT_LOG=$(cat ${NVOC}/6_autotemplog | awk '{print $0,"<br>"}')
WDOG_ALERT_LOG=$(cat ${NVOC}/5_watchdoglog | awk '{print $0,"<br>"}')
NIVIDIA_VERSION=$( nvidia-smi | grep Version | sed 's/[|]//g' |  sed -n 's/^.*Version://p')
DISK=$(df -h / | awk '{ a = $2 } END { print a }')
DISK_FREE=$(df -h / | awk '{ a = $4 } END { print a }')
MEMORY=$(free -m | head -n 2 | tail -n 1 | awk {'print $2'})
FREE_MEMORY=$(free -m | head -n 2 | tail -n 1 | awk {'print $4'})
CPU=$(cat /proc/cpuinfo | grep 'model name' | head -1 | cut -d':' -f2)
GPU_OC=$__CORE_OVERCLOCK
GPU_MC=$MEMORY_OVERCLOCK
GPU_PL=$POWERLIMIT_WATTS
MINER_CMD=$(ps ax | grep -i screen | grep miner | grep -o 'miners.*')
eval 'COIN_POOL=${COIN}_POOL'


# If number gpu installed is set in 1bash give a comparison
if [[ -n "$NUMBER_GPUS_INSTALLED"  ]]
then
  if [[ $(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits) -ne $NUMBER_GPUS_INSTALLED ]]
  then
    GPU_COUNT="<tt style=\"text-align:left; color:red\">$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)</tt>"
  else
    GPU_COUNT=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
  fi
else
  GPU_COUNT=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
fi

if [ $MINER_TEMP_CONTROL == "YES" ]
then
  AUTO_TEMPERATURE_CONTROL="Enabled,"
  if ps aux | grep -v grep | grep -q 6tempcontrol
  then
    TEMP_CHECK=" Running"
  else
    TEMP_CHECK="<tt style=\"text-align:left; color:red\"> Not Running</tt>"
  fi
  if [[ (( $(stat -c%s "${NVOC}/6_autotemplog") -gt 1 )) ]]; then
    TEMP_WARNING="<tt style=\"text-align:left; color:red\">, WARNING</tt>"
  else
    TEMP_WARNING=", No Warning"
  fi
else
  AUTO_TEMPERATURE_CONTROL="<tt style=\"text-align:left; color:red\">Disabled</tt>"
fi

if [ $MINER_WATCHDOG == "YES" ]
then
  WATCHDOG="Enabled,"
  if ps aux | grep -v grep | grep -q 5watchdog
  then
    WDOG_CHECK=" Running"
  else
    WDOG_CHECK="<tt style=\"text-align:left; color:red\"> Not Running</tt>"
  fi
  if [[ (( $(stat -c%s "${NVOC}/5_watchdoglog") -gt 1 )) ]]; then
    WATCHDOG_WARNING="<tt style=\"text-align:left; color:red\">, WARNING</tt>"
  else
    WATCHDOG_WARNING=", No Warning"
  fi
else
  WATCHDOG="<tt style=\"text-align:left; color:red\">Disabled</tt>"
fi

mbvendor=$(cat /sys/devices/virtual/dmi/id/board_vendor)
mbmodel=$(cat /sys/devices/virtual/dmi/id/board_name)
mbversion=$(cat /sys/devices/virtual/dmi/id/board_version)
biosver=$(cat /sys/devices/virtual/dmi/id/bios_version)
biosdate=$(cat /sys/devices/virtual/dmi/id/bios_date)
if [[ "$mbvendor" == ASUSTeK* ]]; then mbvendor="ASUS"; fi
if [[ "$mbvendor" == BIOSTAR* ]]; then mbvendor="BIOSTAR"; fi

#################################################################
########### Auto Switch History and current mining ##############

if [ $COIN == "SALFTER_MPH_PROFIT_SWITCHING" ]
then
  CURRENT_COIN=$(head -n 1 ${NVOC}/current-profit)
  MINING_HISTORY=$(tail -n 5 ${NVOC}/algo_log |  awk '{print $0,"<br>"}')
  AUTO_SWITCH="Salfter MPH Auto Switch"


elif [ $COIN == "SALFTER_NICEHASH_PROFIT_SWITCHING" ]
then
  CURRENT_COIN=$(head -n 1 ${NVOC}/current-profit)
  MINING_HISTORY=$(tail -n 5 ${NVOC}/algo_log |  awk '{print $0,"<br>"}')
  AUTO_SWITCH="Salfter Nicehash Auto Switch"


elif [ $COIN == "SALFTER_PROGRAMATIC_SWITCHING" ]
then
  CURRENT_COIN=$(head -n 1 ${NVOC}/current-profit)
  MINING_HISTORY=$(tail -n 5 ${NVOC}/algo-log |  awk '{print $0,"<br>"}')
  AUTO_SWITCH=("Salfter Programatic Switch")


elif [ $WTM_AUTO_SWITCH == "YES" ]
then
  CURRENT_COIN=$COIN
  MINING_HISTORY=$(cat ${NVOC}/WTM_switch_history | grep 'Mining switched'|tail -n 10 |  awk '{print $0,"<br>"}')
  P_MINING_HISTORY="$MINING_HISTORY <br>"
  WTM_PROFIT=$(cat ${NVOC}/WTM_current_profit | awk '{print $0,"%"}')
  P_WTM_PROFIT="$WTM_PROFIT <br>"
  WTM_REV=$(cat ${NVOC}/WTM_current_revenue | awk '{print $0,""}')
  P_WTM_REV=$"$WTM_REV <br>"
  WTM_AVERAGE_REV=$(awk '{s+=$1}END{print "",s/NR}' RS="\n"  ${NVOC}/WTM_24H_REV)
  P_WTM_AVERAGE_REV="$WTM_AVERAGE_REV <br>"
  BTC_PRICE_VALUE=$(cat ${NVOC}/WTM_BTC_EXCHANGE_RATE | awk '{printf("%d\n",$1 + 0)}' )
  BTC_PRICE="BTC PRICE: "
  WTM_Current_Profitabilty="WTM Current Profitability:"
  WTM_Current_Revenue="WTM Current Revenue: "
  Average_Revenue="24H Average Revenue: "
  LAST_10_AUTO_SWITCHES="<br> LAST 10 AUTO SWITCHES: <br>"
  WTM_HASHRATE="WTM URL Hash Rate: "

  if ps aux | grep -v grep | grep -q 8wtm_auto_switch
  then
    WTM_SWITCH="Running"
  else
    WTM_SWITCH="<tt style=\"text-align:left; color:red\">Not Running</tt>"
  fi

#if python script syncing
  if ps aux | grep -v grep | grep -q WTM_SWITCHER
  then
    WTM_A_S="Syncing data with WTM.com"
  fi
  AUTO_SWITCH="WTM Auto Switch $WTM_SWITCH $WTM_A_S"


elif [ $WTM_PROFIT_CHECK == "YES" ] && [ $WTM_AUTO_SWITCH == "NO" ]
then
  CURRENT_COIN=$COIN
  MINING_HISTORY=""
  WTM_PROFIT=$(cat ${NVOC}/WTM_current_profit | awk '{print $0,"%"}')
  P_WTM_PROFIT="$WTM_PROFIT <br>"
  WTM_REV=$(cat ${NVOC}/WTM_current_revenue | awk '{print $0,""}')
  P_WTM_REV=$"$WTM_REV <br>"
  WTM_SWITCH="WTM Profit Check Running. "
  BTC_PRICE_VALUE=$(cat ${NVOC}/WTM_BTC_EXCHANGE_RATE | awk '{printf("%d\n",$1 + 0)}')
  BTC_PRICE="BTC PRICE: "
  WTM_AVERAGE_REV=""
  WTM_Current_Profitabilty="WTM Current Profitability: "
  WTM_Current_Revenue="WTM Current Revenue: "
  Average_Revenue=""
  LAST_10_AUTO_SWITCHES=""
#if python script syncing
  if ps aux | grep -v grep | grep -q WTM_SWITCHER
  then
    WTM_A_S="Syncing data with WTM.com"
  fi
  AUTO_SWITCH="$WTM_SWITCH $WTM_A_S"

else
  CURRENT_COIN=$COIN
  AUTO_SWITCH="No Auto Switch"
  MINING_HISTORY=""
  BTC_PRICE=""
  BTC_PRICE_VALUE=""
  WTM_PROFIT=""
  WTM_REV=""
  WTM_AVERAGE_REV=""
  WTM_CURRENCY=""
  LAST_10_AUTO_SWITCHES=""
  WTM_Current_Profitabilty=""
  WTM_Current_Revenue=""
fi

##################################################################
########################### Average Hash Rate ####################

if  ps ax | grep miner| grep -v grep | grep -q "zec/zm" ;then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "==========" | grep -o "Sol/s: [0-9]*" | cut -f2- -d: | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "==========" | grep -v grep | wc -l | awk '{print $1}')
  HASH_AVERAGE=$((total_hash / hash_count))

elif  ps ax | grep miner| grep -v grep | grep -q "ethminer" ;then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Speed" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o '[0-9]*.[0-9]* Mh/s' | awk '{print$1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Speed" | grep -v grep | wc -l | awk '{print $1}')
  HASH_AVERAGE=$((total_hash / hash_count))

elif  ps ax | grep miner| grep -v grep | grep -q "claymore" ;then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Total Speed:" | grep -v grep | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $5}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "Total Speed:" | grep -v grep | wc -l | awk '{print $1}')
  HASH_AVERAGE=$((total_hash / hash_count))

elif  ps ax | grep miner| grep -v grep | grep "neoscrypt"| grep -q "KTccminer" ;then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* kH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | grep -v grep |  wc -l | awk '{print $1}')
  HASH_AVERAGE=$((total_hash / hash_count))

elif  ps ax | grep miner| grep -v grep | grep lyra2v2 | grep -q "TPccminer" ;then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* MH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | grep -v grep |  wc -l | awk '{print $1}')
  HASH_AVERAGE=$((total_hash * 1000 / hash_count)) 

elif  ps ax | grep miner| grep -v grep | grep x16r | grep -q "suprminer" ;then
  total_hash=$(tail -500 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* MH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -500 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | grep -v grep |  wc -l | awk '{print $1}')
  HASH_AVERAGE=$((total_hash / hash_count))

elif  ps ax | grep miner| grep -v grep | grep timetravel10 |grep -q "TPccminer" ;then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | grep -o "[0-9]*.[0-9]* MH/s" | awk '{print $1}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep "accepted" | grep -v grep |  wc -l | awk '{print $1}')
  HASH_AVERAGE=$((total_hash / hash_count))
elif  ps ax | grep miner| grep -v grep | grep -q "zec/bminer" ;then
  total_hash=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep -o "Total [0-9]*" | awk '{print $2}' | awk '{s+=$1} END {printf "%.0f", s}')
  hash_count=$(tail -100 ${NVOC}/nvoc_logs/screenlog.0 | grep -o "Total [0-9]*" | awk '{print $2}' | grep -v grep | wc -l | awk '{print $1}')
  HASH_AVERAGE=$((total_hash / hash_count))
fi

##################################################################
########################### WTM Hash Rate ####################

if  ps ax | grep miner | grep -v grep | grep -q -E "zm_miner|ewbf|bminer" ;then
  WTM_HASH=$(cat ${NVOC}/1bash | grep WTM |  grep -o '5Beq_hr%5D=[0-9]*' | cut -f2- -d=)

elif  ps ax | grep miner | grep -v grep | grep -q -E "claymore|ethminer" ;then
  WTM_HASH=$(cat ${NVOC}/1bash | grep WTM |  grep -o '5Beth_hr%5D=[0-9]*' | cut -f2- -d=)

elif  ps ax | grep miner | grep -v grep | grep -q "neoscrypt"  ;then
  WTM_HASH=$(cat ${NVOC}/1bash | grep WTM |  grep -o 'ns_hr%5D=[0-9]*' | cut -f2- -d=)

elif  ps ax | grep miner | grep -v grep | grep -q "xmr"  ;then
  WTM_HASH=$(cat ${NVOC}/1bash | grep WTM |  grep -o '%5Bcn_hr%5D=[0-9]*' | cut -f2- -d=)

elif  ps ax | grep miner | grep -v grep | grep "lyra2v2" | grep -q "TPccminer" ;then
  WTM_HASH=$(cat ${NVOC}/1bash | grep WTM |  grep -o '%5Blrev2_hr%5D=[0-9]*' | cut -f2- -d=)

elif  ps ax | grep miner| grep -v grep | grep timetravel10 |grep -q "TPccminer" ;then
  WTM_HASH=$(cat ${NVOC}/1bash | grep WTM |  grep -o '5Btt10_hr%5D=[0-9]*' | cut -f2- -d=)

elif  ps ax | grep miner| grep -v grep | grep x16r | grep -q "suprminer" ;then
  WTM_HASH=$(cat ${NVOC}/1bash | grep WTM |  grep -o '5Bx16r_hr%5D=[0-9]*' | cut -f2- -d=)
fi

##################################################################
########################### Miner Logs ###########################

if  ps ax | grep miner| grep -v grep | grep -q "dstm" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 | grep -e GPU -e "====" |grep -v '#' | tail -n $TAIL_GPU_COUNT |sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

elif  ps ax | grep miner| grep -v grep | grep -q "zec/v3_" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 | grep -E 'GPU0|Total' | grep -v Temp |grep -v INFO |  tail -n $TAIL_GPU_COUNT  |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

elif  ps ax | grep miner| grep -v grep | grep -q "bminer" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 | grep -e GPU -e Total |grep -v '#' | tail -n $TAIL_GPU_COUNT |sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

elif  ps ax | grep miner| grep -v grep | grep -q "SPccminer" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 |  grep -e "accepted" -e "GPU" | tail -n $TAIL_GPU_COUNT |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

elif  ps ax | grep miner| grep -v grep | grep -q "TPccminer" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 |  grep -e "accepted" -e "GPU" | tail -n $TAIL_GPU_COUNT |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

elif  ps ax | grep miner| grep -v grep | grep -q "KTccminer" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 |  grep -e "accepted" -e "GPU" | tail -n $TAIL_GPU_COUNT |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

elif  ps ax | grep miner| grep -v grep | grep -q "ASccminer" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 |  grep -e "S/A/T" -e "GPU" | tail -n $TAIL_GPU_COUNT |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

elif  ps ax | grep miner| grep -v grep | grep -q "ethminer" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 |  grep -e "ethminer" | tail -n $TAIL_GPU_COUNT |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

elif  ps ax | grep miner| grep -v grep | grep -q "claymore" ;then
  MINER_LOG=$(tail -n 150 ${NVOC}/nvoc_logs/screenlog.0 |  grep -Ev 'DevFee|New job|SHARE FOUND|Share accepted' | tail -n $TAIL_GPU_COUNT |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' | awk '{print $0,"<br>"}')

else
  MINER_LOG=$(tail -n $(( $TAIL_GPU_COUNT * 2 )) ${NVOC}/nvoc_logs/screenlog.0 |  sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' |  awk '{print $0,"<br>"}')
fi

###################################################################
######################### BODY ####################################

echo '<br></br>'
echo '<body style="background-color:black; color:#ffff66;font-size: 16px ">'
echo "<strong>"
echo "<button>"
echo '<a href="minerinfo" class="button">Refresh Miner Info</a>'
echo "</button>"
echo '<title>Worker: '$WORKERNAME'</title>'
echo '</head>'
echo '<body>'
echo '<h3>'  "$nvOC_Ver"
echo '<h4>'  "Worker : ""<tt style=\"color:white;\">" $WORKERNAME "</tt>"  '</h4>'

echo "Boot Time: " "<tt style=\"text-align:left; color:white; \">" "$SYSTEM_BOOT_TIME <br> </tt>"

echo "System Up Time: " "<tt style=\"text-align:left; color:white\">" "$SYSTEM_UP_TIME <br> </tt>"

echo "NVOC root path: " "<tt style=\"text-align:left; color:white\">" "${NVOC} <br> </tt>"

echo "Miner Up Time: " "<tt style=\"text-align:left; color:white\">" "$MINER_UP_TIME<br> </tt>"

echo "Auto Temp Control: "  "<tt style=\"text-align:left; color:white\">" "$AUTO_TEMPERATURE_CONTROL$TEMP_CHECK$TEMP_WARNING <br> </tt>"

echo "Watch Dog: "  "<tt style=\"text-align:left; color:white\">" "$WATCHDOG$WDOG_CHECK$WATCHDOG_WARNING <br> </tt>"

echo "Auto Switcher: " "<tt style=\"text-align:left; color:white\">" "$AUTO_SWITCH <br></tt>"

echo "Gpu Count: " "<tt style=\"text-align:left; color:white\">" "$GPU_COUNT <br> </tt>"

echo "GPU Utilization: "  "<tt style=\"text-align:left; color:white\">" "$GPU_UTILIZATIONS <br> </tt>"

echo "Currently Mining: " "<tt style=\"text-align:left; color:white\">" "$CURRENT_COIN <br> </tt>"

echo "Average Hash Rate: " "<tt style=\"text-align:left; color:white\">" "$HASH_AVERAGE <br> </tt>"
if [ $WTM_AUTO_SWITCH == "YES" ] ; then
echo "$WTM_HASHRATE" "<tt style=\"text-align:left; color:white\">" "$WTM_HASH <br> </tt>"
fi
echo "Mining Pool: " "<tt style=\"text-align:left; color:white\">" "${!COIN_POOL} <br> </tt>"

echo "Miner Command: " "<tt style=\"text-align:left; color:white\">" "$MINER_CMD <br> </tt>"

echo "Distro: " "<tt style=\"text-align:left; color:white; \">" "$LSB_RELEASE $UNAME <br> </tt>"

echo "Motherboard: " "<tt style=\"text-align:left; color:white\">" "$mbvendor, $mbmodel, $mbversion<br> </tt>"

echo "BIOS Version, Date: " "<tt style=\"text-align:left; color:white\">" "$biosver, $biosdate<br> </tt>"

echo "CPU: " "<tt style=\"text-align:left; color:white\">" "$CPU<br> </tt>"

echo "Disk / Free Disk: " "<tt style=\"text-align:left; color:white\">" "$DISK / $DISK_FREE<br> </tt>"

echo "Memory / Free Memory: " "<tt style=\"text-align:left; color:white\">" "$MEMORY / $FREE_MEMORY<br> </tt>"

echo "Load Average: " "<tt style=\"text-align:left; color:white\">" "$LOAD_AVERAGE<br> </tt>"

echo "Nvidia Driver Version: "  "<tt style=\"text-align:left; color:white\">" "$NIVIDIA_VERSION <br> </tt>"

echo "Reboot Required: "  "<tt style=\"text-align:left; color:white\">" "$REBOOT_REQUIRED <br> </tt>"

echo "Global GPU PL: " "<tt style=\"text-align:left; color:white\">" "$GPU_PL <br> </tt>"

echo "Global GPU OC: " "<tt style=\"text-align:left; color:white\">" "$GPU_OC <br> </tt>"

echo "Global GPU MC: " "<tt style=\"text-align:left; color:white\">" "$GPU_MC <br> </tt>"

echo "GPU Target Temp: "  "<tt style=\"text-align:left; color:white\">" "$TARGET_TEMP <br> </tt>"

echo "GPU Minimum Fan Speed: "  "<tt style=\"text-align:left; color:white\">" "$MINIMAL_FAN_SPEED <br> </tt>"

echo "$BTC_PRICE " "<tt style=\"text-align:left; color:white\">" "$BTC_PRICE_VALUE $WTM_CURRENCY<br> </tt>"

echo "$WTM_Current_Profitabilty" "<tt style=\"text-align:left; color:white\">" "$P_WTM_PROFIT </tt>"

echo "$WTM_Current_Revenue" "<tt style=\"text-align:left; color:white\">" "$P_WTM_REV </tt>"

echo "$Average_Revenue" "<tt style=\"text-align:left; color:white\">" "$P_WTM_AVERAGE_REV   </tt>"

echo "$LAST_10_AUTO_SWITCHES  " "<tt style=\"text-align:left; color:white\">" "$P_MINING_HISTORY </tt>"

echo "Miner Hash Rate / Output: <br>" "<tt style=\"text-align:left; color:white\">" "$MINER_LOG <br> </tt>"

echo "GPU Temp, Fan and Power Info: <br>"  "<tt style=\"text-align:left; color:white\">" "$TEMP_FAN_POWER <br> </tt>"

echo "GPU Temp, Fan and Power Alerts: <br>"  "<tt style=\"text-align:left; color:red\">" "$TEMP_ALERT_LOG <br> $LOST_GPU <br> </tt>"

echo "Watch Dog Alerts: <br>"

echo "<button>"
echo '<a href="minerinfo?clearalerts" class="button">Clear Alerts</a>'
echo "</button>"

if [[ $1 == clearalerts ]]
then
 echo "<tt style=\"text-align:left; color:green\">Alert history cleared <br/> </tt>"
fi
echo '<br/>' "<tt style=\"text-align:left; color:red\">" "$WDOG_ALERT_LOG <br> </tt>"


echo "</strong>"
echo '</body>'

echo '</html>'

exit 0
