#!/bin/bash

##########################################################################
##########################################################################
#################   nvOC v0019-2.1 - Community Release   #################
##############        by papampi, Stubo and leenoox         ##############
##########   Based on the original nvOC v0019-1.4 by fullzero   ##########
##########################################################################
##########################################################################

# WhatToMine.com Auto Switch by papampi
# for nvOC v0019-2.1 - Community Release


# DEV Mod Log:
#
# v=0001 : papampi: Initial Revision
#
# v=0002 : Papampi: Added 24 hour average revenue
#
# v=0003 : Papampi: Wait for miner start to prevent double miner running
#
# v=0004 : leenoox: Read curent coin from 1bash
#
# v=0005 : Papampi: Add Algo check to restart only miner or 3main
#
# v=0006 : Papampi: Check for last top coin whether its in coin list or not
#
# v=0007 : Papampi: Changes for plusCPU
#
# v=0008 : Papampi: Added minimum mining time, 24H Average revenue
#
# v=0009 : Papampi: Fixed minimum mining time
#
# v=0010 : Papampi: Yet another Fix for minimum mining time
#
# v=0011 : Papampi: Disable minimum mining time, causing problems
#
# v=0012 : Papampi: Added NiceHash, Start in screen and changed logging system.
#
# v=0013 : Papampi: Enable and Change minimum mining time
#
# v=0014 : Papampi: Added force switch to bypass minimum wait time if profit is higher than given value.
#
# v=0015 : Papampi: Changed top coin resolve
#
# v=0016 : Papampi: New miner time based on last switch
#
# v=0017 : Papampi: Kill miner before restart 3main to prevent GPU lockup
#
# v=0018 : Papampi: Some code cleanups
#
# v=0019 : Papampi: Lower difference when minimum mining time reached


nvOC_Ver="nvOC v0019-2.1 - Community Release"
wtm_auto_switch_ver="v0019-2.0.0019"   # Do not edit this

echo ""
echo ""
echo "WhatToMine.com Auto Switch $wtm_auto_switch_ver by papampi"
echo ""

export NVOC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${NVOC}/1bash
CURRENT_COIN=$COIN
WDOG_LOG="${NVOC}/nvoc_logs/watchdog-screenlog.0"

# Creating a log file to record coin switch
WTM_HISTORY="${NVOC}/WTM_switch_history"
if [[ -e "$WTM_HISTORY" ]] ; then
  #Limit the logfile, just keep the last 100 lines
  echo "$(cat $WTM_HISTORY | tail -n 100)" > $WTM_HISTORY
fi

# Check last top coin and change if not in coin list any more
FIRST_COIN="$(echo "$WTM_AUTO_SWITCH_COINS" | awk -F'[_;]' '{print $1}')"
TOP_COIN=$(sed 's/:[0-9]*//' < ${NVOC}/WTM_top_coin)
if [ ! $(echo "$WTM_AUTO_SWITCH_COINS" | grep "$TOP_COIN") ]
then
  echo "Last top coin not in current coin list any more, Switch to 1st coin"
  echo " " > ${NVOC}/WTM_top_coin
  echo "$FIRST_COIN:100" > ${NVOC}/WTM_top_coin
fi

MINER_START_TIME=$(date +%s)
while true
do
  source ${NVOC}/1bash

  if [[ $AUTO_START_MINER == "YES" ]]; then

  #Waiting for miner start before start switching
    if [[ !  $(ps ax | grep SCREEN | grep miner | grep -v cpuminer) ]];then
      echo "Miner not running"
      echo ""
      while [[ -z $(ps ax | grep SCREEN | grep miner | grep -v cpuminer) ]];  do
        echo "Miner still not running, waiting ..."
        echo ""
        sleep 5
      done
      echo "Miner is running now"
    fi

    CURRENT_TIME=$(date +%s)
    MINER_TIME=$(( CURRENT_TIME - MINER_START_TIME ))
    MINER_TIME_MIN=$(( MINER_TIME / 60 ))
    echo "Mining $CURRENT_COIN for $MINER_TIME_MIN minutes"

    if [[ $MINER_TIME -ge $WTM_MINIMUM_MINING_TIME ]]
    then
      echo "Minimum mining time passed, checking for new coins with $WTM_LOWER_MIN_DIFFERENCE% more profit"
      python2.7 ${NVOC}/WTM_SWITCHER ${NVOC}/WTM_1.json
    else
      echo "Minimum mining time not reached, checking for new coins with $WTM_MIN_DIFFERENCE% more profit"
      python2.7 ${NVOC}/WTM_SWITCHER ${NVOC}/WTM.json
    fi

    sleep 5
    CURRENT_COIN=$COIN
    CURRENT_COIN_ALGORITHM=$ALGORITHM
    TOP_COIN=$(sed 's/:[0-9]*//' < ${NVOC}/WTM_top_coin)
    TIMEOUT=$((WTM_AUTO_SWITCH_SYNC_INTERVAL * 60))


    if [ "$ALGO_SPECIFIC_OC" == "YES" ]; then
      if [ "$TOP_COIN" == "FTC" -o "$TOP_COIN" == "ORB" -o "$TOP_COIN" == "PXC" -o "$TOP_COIN" == "VIVO" -o "$TOP_COIN" == "TZC" -o "$TOP_COIN" == "NICE-NEOSCRYPT" ]; then
        TOP_COIN_ALGORITHM="NEOSCRYPT"
      fi
      if [ "$TOP_COIN" == "ETH" -o "$TOP_COIN" == "ETC" -o "$TOP_COIN" == "EXP" -o "$TOP_COIN" == "UBQ" -o "$TOP_COIN" == "MUSIC" -o "$TOP_COIN" == "SOIL" -o "$TOP_COIN" == "PIRL" -o "$TOP_COIN" == "NICE-ETHASH"  ]; then
        TOP_COIN_ALGORITHM="ETHASH"
      fi
      if [ "$TOP_COIN" == "BTG" -o "$TOP_COIN" == "ZEC" -o "$TOP_COIN" == "ZEN" -o "$TOP_COIN" == "HUSH" -o "$TOP_COIN" == "ZCL" -o "$TOP_COIN" == "KMD" -o "$TOP_COIN" == "VOTE" -o "$TOP_COIN" == "NICE-EQUIHASH" ]; then
        TOP_COIN_ALGORITHM="EQUIHASH"
      fi
      if [ "$TOP_COIN" == "SIGT" -o "$TOP_COIN" == "ALTCOM"  -o "$TOP_COIN" == "NICE-SKUNKHASH" ]; then
        TOP_COIN_ALGORITHM="SKUNK"
      fi
      if [ "$TOP_COIN" == "XMR" -o "$TOP_COIN" == "KRB" -o "$TOP_COIN" == "ETN"  -o "$TOP_COIN" == "NICE-CRYPTONIGHT" ]; then
        TOP_COIN_ALGORITHM="CRYPTONIGHT"
      fi
      if [ "$TOP_COIN" == "MONA" -o "$TOP_COIN" == "VTC" -o "$TOP_COIN" == "NICE-LYRA2REV2" ]; then
        TOP_COIN_ALGORITHM="LYRA2REV2"
      fi
      if [ "$TOP_COIN" == "ZCOIN" ]; then
        TOP_COIN_ALGORITHM="LYRA2V2"
      fi
    fi

    if [[ "$CURRENT_COIN" != "$TOP_COIN" ]]; then

      #If miner running time is more than given time or profit is more than given value switch the coin
      FORCE_SWITCH=0
      CURRENT_COIN_PROFIT=$(grep "$COIN"  < ${NVOC}/WTM_current_profit | sed 's/.*://')
      TOP_COIN_PROFIT=$(sed 's/.*://' < ${NVOC}/WTM_top_coin)

      if [[ $((TOP_COIN_PROFIT - CURRENT_COIN_PROFIT)) -ge $WTM_FORCE_SWITCH ]]
      then
        FORCE_SWITCH=1
      fi
      if [[ $MINER_TIME -ge $WTM_MINIMUM_MINING_TIME || $FORCE_SWITCH == 1 ]]; then
        if [[ $FORCE_SWITCH == 1 ]];then
          echo "New coin has %$((TOP_COIN_PROFIT - CURRENT_COIN_PROFIT)) more profit, ignore timer and make the switch"
        fi
        MINER_START_TIME=$(date +%s)
        sed -i '/^#/!s/'COIN=\"$CURRENT_COIN\"'/'COIN=\"$TOP_COIN\"/'' ${NVOC}/1bash
        grep "$(awk -F: '{print $1}' <  ${NVOC}/WTM_top_coin)" <  ${NVOC}/WTM_current_revenue |  awk -F: '{print $2}' >> ${NVOC}/WTM_24H_REV
        SYNC_COUNT=$(( 1440 / WTM_AUTO_SWITCH_SYNC_INTERVAL ))
        echo "$(tail -$SYNC_COUNT WTM_24H_REV)" > ${NVOC}/WTM_24H_REV
        sed -i '/^$/d' ${NVOC}/WTM_24H_REV
        sleep 1

        if  [[ $ALGO_SPECIFIC_OC == "NO" ]] || [[ $ALGO_SPECIFIC_OC == "YES"  &&  $CURRENT_COIN_ALGORITHM == "$TOP_COIN_ALGORITHM" ]]; then
          echo "Current Coin: $CURRENT_COIN"
          echo "Top Coin: $TOP_COIN"
          echo "Switching Coin with same Algo or ALGO_SPECIFIC_OC=No, Restarting miner"
          echo ""
          if ps ax | grep SCREEN | grep -v cpuminer |grep -q miner ; then
            echo "Miner is running, lets make the switch"
            if [[ $MINER_WATCHDOG == "YES" ]]; then
              pkill -f 5watchdog
              echo "WTM Auto Switch Restarted watchdog" | tee -a $WDOG_LOG
              sleep 1
              screen -c ${NVOC}/screenrc-watchdog -dmSL wdog bash ${NVOC}/5watchdog
              echo "watchdog restarted in screen wdog; 'nvOC wdog-log'"
              echo ""
            fi
            target=$(ps ax | grep -v cpuminer | grep SCREEN | grep miner | awk '"miner" {print $1}')
            kill "$target"
            sleep 2
            echo "Commencing Miner Start Command..."
            bash ${NVOC}/0miner
            ps ax | grep miner | grep -o 'SCREEN.*'
            echo "process in screen miner; 'nvOC miner-log'"
            echo ""
            sleep 10
            if [[ ! $(ps ax | grep SCREEN | grep -v cpuminer | grep miner ) ]] ;then
              bash ${NVOC}/0miner
            fi
          fi

        elif [[ $ALGO_SPECIFIC_OC == "YES"  &&  $CURRENT_COIN_ALGORITHM != $TOP_COIN_ALGORITHM ]]; then
          echo "Current Coin Algo: $CURRENT_COIN_ALGORITHM"
          echo "Top Coin Algo: $TOP_COIN_ALGORITHM"
          echo "Current Coin: $CURRENT_COIN"
          echo "Top Coin: $TOP_COIN"
          echo "Switching Coin with ALGO_SPECIFIC_OC=YES and different Algo, Restarting 3main"
          pkill -f 5watchdog
          echo "WTM Auto Switch Restarted watchdog" | tee -a $WDOG_LOG
          target=$(ps ax | grep -v cpuminer | grep SCREEN | grep miner | awk '"miner" {print $1}')
          kill "$target"
          sleep 3
          pkill -f 3main
        fi
        echo "$(date) - Mining switched from $CURRENT_COIN to $TOP_COIN" | tee -a $WTM_HISTORY
        echo "24 Hour Average Revenue: $(awk '{s+=$1}END{print "",s/NR}' RS="\n"  ${NVOC}/WTM_24H_REV) $WTM_CURRENCY"
        echo "Check again in $TIMEOUT seconds"
        echo ""
        echo ""
      else
        echo "Mining $CURRENT_COIN for $MINER_TIME_MIN minutes, continue mining $CURRENT_COIN for $((WTM_MINIMUM_MINING_TIME - MINER_TIME)) more seconds"
      fi
      sleep $TIMEOUT
    else
      echo "$(date) - Same Coin on Top, Continue mining $CURRENT_COIN"
      echo "24 Hour Average Revenue: $(awk '{s+=$1}END{print "",s/NR}' RS="\n"  ${NVOC}/WTM_24H_REV) $WTM_CURRENCY"
      echo "Check again in $TIMEOUT seconds"
      echo ""
      echo ""
      sleep 1
      grep "$(awk -F: '{print $1}' <  ${NVOC}/WTM_top_coin)" <  ${NVOC}/WTM_current_revenue |  awk -F: '{print $2}' >> ${NVOC}/WTM_24H_REV
      SYNC_COUNT=$(( 1440 / WTM_AUTO_SWITCH_SYNC_INTERVAL ))
      echo "$(tail -$SYNC_COUNT ${NVOC}/WTM_24H_REV)" > ${NVOC}/WTM_24H_REV
      sed -i '/^$/d' ${NVOC}/WTM_24H_REV

      sleep $TIMEOUT
    fi

  else
    echo "Auto start miner set to NO"
  fi
done

