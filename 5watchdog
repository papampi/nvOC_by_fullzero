#!/bin/bash

##########################################################################
##########################################################################
#################   nvOC v0019-2.1 - Community Release   #################
##########   Based on the original nvOC v0019-1.4 by fullzero   ##########
##########################################################################
##########################################################################

# DEV Mod Log:
#
# v=0001 : Stubo:
#          Initial Revision
# v=0002 : Papampi:
#          Add dynamic wait times, Not send telegram for every switch,
#          compare installed GPU counts and check for miner at start of watchdog
# v=0003 : Stubo:
#          Bug Fix - changed numtest='^[0-9]+$' to numtest='^[0-9.]+$'
# v=0004 : Stubo:
#          Enhancement - reduced sleep time in GPU utilization test loop from 0.5 to 0.2
# v=0005 : Papampi:
#          Add wtm python check, add if internet is down to prevent too many logs, add $COUNT
#          to (Low Utilization Detected: 3main will reinit if there are $COUNT ...)
#          added source 1bash to read installed GPUs
# v=0006 : leenoox:
#          THRESHOLD=80 - I think we should keep this at 80, at normal operation sometimes drops to 82 or so then goes back to 100
#          renice -19 - this is highest priority possible, watchdog should be highest
#          renice > /dev/null - no need for output on screen
#          lastlog limit to 500 lines. why do we need to keep 2000 lines? imo, even 500 is too much
#          changed reference of "miner restart script" to "Watchdog", disabled logging of "Starting watchdog..."
#          changed GPU_COUNT to more efficient code using "-i 0" instead of tail
#          added telegram check, only send telegrams if set to "YES" in 1bash
#          moved sleep=10 until next cycle to the end of the loop
#          changed all backticks `...` to $(...)
# v=0007 : Stubo:
#          Added echo of utilization and gpu counts as user feedback
# v=0008 : Papampi:
#          Removed MINER_TIME to comply with changes in 3main (Moving watchdog before miner starts)
#          Added check and restart miner after internet comes back online
# v=0009 : leenoox:
#          Workaround for some 1050's reporting "Unknown" or "ERR" when power.draw is queried from nvidi-smi
# v=0010 : Stubo:
#          Added secondary fix for 1050's reporting "[Not Supported]" or "[Unknown Error]" when power.draw is
#          queried from nvidia-smi (a.k.a. bleed issue of power.draw)
# v=0011 : Papampi
#          Telegram Changes
# v=0012 : Papampi
#          Pool check
# v=0013 : Papampi
#          Alternate Pool switch with 9poolswitch
# v=0014 : Papampi
#          Check internet and miner before starting main loop
# v=0015 : LukePicci
#          Relocate nvOC to arbitrary install directory
# v=0016 : Papampi
#          Code cleanup, lower nvidia-smi queries, cycle and threshold variables in 1bash
#          Added tags to logs
# v=0017 : LuKePicci,papampi
#          Rework for salfter's switchers compatibility
# v=0018 : papampi (suggestion by abdeldev)
#          Use sysrq reboot, to prevent freeze/hang
# v=0019 : papampi
#          Load average check, notify, reboot (1bash setting)
# v=0020 : papampi
#          Check Ping if Network couldnt resolve 


nvOC_Ver="nvOC v0019-2.1 - Community Release"
nvOC_wdog_ver="v0019-2.1.020"   # Do not edit this

echo "Watchdog for $nvOC_Ver"
echo "Version: $nvOC_wdog_ver"
echo ""

export DISPLAY=:0
source ${NVOC}/1bash

if [ $WATCHDOG_USE_COLOR == "YES" ]; then
  N='\e[0m'     # Normal
  B='\e[1m'     # Bold
  R='\e[31m'    # Red
  G='\e[32m'    # Green
  C='\e[36m'    # Cyan
  Y='\e[33m'    # Yellow
else
  N=""
  B=""
  R=""
  G=""
  C=""
  Y=""
fi

# Global Variables
THRESHOLD=$GPU_UTIL_THRESHOLD         # Minimum allowed % utilization before taking action

# Set higher process and disk I/O priorities because we are essential service
sudo renice -n -19 -p $$ >/dev/null 2>&1 && sudo ionice -c2 -n0 -p$$ >/dev/null 2>&1
sleep 1

# Log file handling (check existence, size limitation or creation)
# Log file to record restarts, status, errors, utilization issues
LOG_FILE="${NVOC}/5_watchdoglog"

if [ -e "$LOG_FILE" ] ; then
  # Limit the logfile, just keep the last 500 lines
  echo "$(tail -500 $LOG_FILE)" > $LOG_FILE
  if [[ $(wc -l <$LOG_FILE) -gt 1 ]]; then
    echo -e "${B}LOG FILE:${N} (Showing the last 10 recorded entries)${R}"
    echo "$(tail -10 $LOG_FILE)"
    echo -e "${N}"
    echo ""
  else
    echo -e "${B}LOG FILE${N} is empty."
    echo ""; echo ""
  fi
else
  touch $LOG_FILE                   # if log file does not exist, create one
  echo -e "New ${B}LOG FILE${N} created."
  echo ""; echo ""
fi

chmod a+w "${LOG_FILE}"             # allow clearing by www

# Provide feedback
echo "$(date) - [INFO] - Watchdog is starting" # | tee -a ${LOG_FILE}
echo ""
sleep 2

# Don't send telegram alert after every WTM switch
if [[ $TELEGRAM_ALERTS == "YES" && $AUTO_SWITCH == "NO" ]]; then
  bash "${NVOC}/telegram"
fi

# Initialize vars
REBOOTRESET=0
GPU_COUNT=$(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
COUNT=$((6 * GPU_COUNT))
# Track how many times we have restarted the miner/3main
RESTART=0
# Dynamic sleep time, dstm zm miner takes a very long time to load GPUs
SLEEP_TIME=$(( GPU_COUNT * 2 + 10 ))
numtest='^[0-9.]+$'

# If number gpu installed is set in 1bash give a comparison
if [[ -n "$NUMBER_GPUS_INSTALLED"  ]]
then
  echo ""
  if [[ $GPU_COUNT -ne $NUMBER_GPUS_INSTALLED ]]
  then
    echo "$(date) - [WARNING] - We should have $NUMBER_GPUS_INSTALLED GPUs but nvidia-smi reports $GPU_COUNT" #| tee -a $LOG_FILE
  else
    echo "$(date) - [INFO] - Installed GPUs: $NUMBER_GPUS_INSTALLED, Connected GPUs: $GPU_COUNT"
  fi
  echo ""
fi

## Check internet before starting main loop
DNS=0
PING=0
while ! nc -vzw1 google.com 443;
do
  if (( PING >= 20 ))
  then
    echo "$(date) - [WARNING] - Name resolution problem while ping is ok, waited 10 minutes, restarting system" | tee -a ${LOG_FILE}
    sleep 10
    sudo reboot
  fi
  echo "$(date) - [WARNING] - Internet is down, checking ..."
  if ping -c1 8.8.8.8 &> /dev/null
  then
    echo "$(date) - [WARNING] - Ping ok, but problem in name resolution: check again in 30 sec" | tee -a ${LOG_FILE}
    (( PING++ ))
  fi
  sleep 30
  (( DNS++ ))
done

if [[ $DNS > 0 || $PING > 0 ]]
then
  echo "$(date) - [INFO] - There was a problem with network, now its ok" | tee -a ${LOG_FILE}
fi  

## Before starting to check GPU utilization in main loop check if miner start was successful or not
## in case there is problem in miner variables or other problems, dont start main loop to restart 3main and eventually reboot.
echo "Giving miner enough to stabilize"
sleep $WATCHDOG_CYCLE

if ps ax | grep SCREEN | grep -v cpuminer | grep -q miner
then
  echo "$(date) - [INFO] - Miner is running: going on watch"
else
  echo "$(date) - [WARNING] - Miner not running, reinit nvOC from scratch" | tee -a ${LOG_FILE}
  pkill -f 3main
  exit
fi

sleep $SLEEP_TIME

### Watchdog Main Loop [infinite]
while true
do
  #If WTM auto switch python cant sync, kill it
  if [[ $AUTO_SWITCH  ==  WTM_SWITCHING || $WTM_PROFIT_CHECK == YES ]]
  then
    WTM_S_PID=$(ps -ef | grep WTM_SWITCHER | grep -v grep |awk '{print $2}')
    if  [[ -n $WTM_S_PID ]]
    then
      WTM_S_PID_TIME=$(ps -eo pid,etimes | grep $WTM_S_PID | awk  '$2> 30 { print $1}')
      echo "WTM Switcher Syncing"
      if  [[ -n "$WTM_S_PID_TIME" ]]
      then
        echo "$(date) - [WARNING] - WTM switcher can't sync, kill it"
        ps -eo pid,etimes | grep $(pgrep -f WTM_SWITCHER) | awk  '$2> 30 { print $1}'  | xargs kill -9
      fi
    fi
  fi

  # If 1, 5 and 15 min load average are more than double cpu core give warning
  HIGH_AVERAGE=$(( $(nproc) * 2 ))
  AVERAGES=$(uptime | sed 's/.*: //g; s/,//g')
  echo "Load Average: $AVERAGES"

  AVERAGE_1=$(echo "$AVERAGES" | cut -d"," -f1)
  if [[ "$AVERAGE_1" > "$HIGH_AVERAGE"  ]]
  then
    AVRG_1="HIGH"
  else
    AVRG_1="OK"
  fi
  AVERAGE_5=$(echo "$AVERAGES" | cut -d"," -f2)
  if [[ "$AVERAGE_5" > "$HIGH_AVERAGE"  ]]
  then
    AVRG_5="HIGH"
  else
    AVRG_5="OK"
  fi
  AVERAGE_15=$(echo "$AVERAGES" | cut -d"," -f3)
  if [[ "$AVERAGE_15" > "$HIGH_AVERAGE"  ]]
  then
    AVRG_15="HIGH"
  else
    AVRG_15="OK"
  fi

  if [[ $plusCPU == "NO" ]]
  then
    if [[ $AVRG_1 == "HIGH" ]] && [[ $AVRG_5 == "HIGH" ]] && [[ $AVRG_15 == "HIGH" ]]
    then
      echo "WARNING: $(date) - Load Averages are too high" | tee -a ${LOG_FILE}
      if [[ $TELEGRAM_ALERTS == "YES" ]]
      then
        bash "${NVOC}/telegram"
      fi
      if [[ $HIGH_LOAD_REBOOT  == "YES" ]]
      then
        echo "WARNING: $(date) - Rebooting system in 5 sec" | tee -a ${LOG_FILE}
        sleep 5
        sudo bash ${NVOC}/sysrq_reboot.sh
      fi
    fi
  fi

  # Set/increment vars
  NUM_GPU_BLW_THRSHLD=0              # Track how many GPU are below threshold
  REBOOTRESET=$((REBOOTRESET + 1))

  # Loop over each GPU and check utilization
  for (( GPU=0; GPU < GPU_COUNT; GPU++))
  do
    { IFS=', ' read UTIL CURRENT_TEMP CURRENT_FAN PWRLIMIT POWERDRAW ; } < <(nvidia-smi -i $GPU --query-gpu=utilization.gpu,temperature.gpu,fan.speed,power.limit,power.draw --format=csv,noheader,nounits)
    # echo utilization
    echo "$(date) - [INFO] - GPU$GPU Utilization: $UTIL%"

    # Numeric check: if any are not numeric, we have a mining problem

    # Workaround for 1050's reporting "[Not Supported]" or "[Unknown Error]" when power.draw is queried from nvidia-smi
    if [[ $(nvidia-smi -i $GPU --query-gpu=name --format=csv,noheader,nounits | grep "1050") ]]
    then
      if ! [[ ( $UTIL =~ $numtest ) && ( $CURRENT_TEMP =~ $numtest ) && ( $CURRENT_FAN =~ $numtest ) && ( $PWRLIMIT =~ $numtest ) ]]
      then
        # Not numeric so: Help we've lost a GPU, so reboot
        echo "$(date) - [CRITICAL] - Lost GPU$GPU so restarting system. Found GPU's:" | tee -a ${LOG_FILE}
        echo ""
        # Hope PCI BUS info will help find the faulty GPU
        nvidia-smi --query-gpu=gpu_bus_id --format=csv | tee -a ${LOG_FILE}
        echo "$(date) - [CRITICAL] - reboot in 10 seconds"  | tee -a ${LOG_FILE}
        echo ""
        if [[ $TELEGRAM_ALERTS == "YES" ]]; then
          bash "${NVOC}/telegram"
        fi
        sleep 10
        if [[ $SYSRQ_REBOOT == YES ]]
        then
          sudo bash ${NVOC}/sysrq_reboot.sh
        else
          sudo reboot
        fi
      elif (( UTIL < THRESHOLD )) # If utilization is lower than threshold, decrement counter
      then
        echo "$(date) - [WARNING] - GPU${GPU} under ${THRESHOLD}% threshold - UTILIZATION: ${UTIL}%" | tee -a ${LOG_FILE}
        COUNT=$((COUNT - 1))
        NUM_GPU_BLW_THRSHLD=$((NUM_GPU_BLW_THRSHLD + 1))
      fi
    else
      if ! [[ ( $UTIL =~ $numtest ) && ( $CURRENT_TEMP =~ $numtest ) && ( $CURRENT_FAN =~ $numtest ) && ( $POWERDRAW =~ $numtest ) && ( $PWRLIMIT =~ $numtest ) ]]; then
        # Not numeric so: Help we've lost a GPU, so reboot
        echo "$(date) - [CRITICAL] - Lost GPU$GPU so restarting system. Found GPU's:" | tee -a ${LOG_FILE}
        echo ""
        # Hope PCI BUS info will help find the faulty GPU
        nvidia-smi --query-gpu=gpu_bus_id --format=csv | tee -a ${LOG_FILE}
        echo "$(date) - [CRITICAL] - reboot in 10 seconds"  | tee -a ${LOG_FILE}
        echo ""
        if [[ $TELEGRAM_ALERTS == "YES" ]]; then
          bash "${NVOC}/telegram"
        fi
        sleep 10
        if [[ $SYSRQ_REBOOT == YES ]]
        then
          sudo bash ${NVOC}/sysrq_reboot.sh
        else
          sudo reboot
        fi
      elif (( UTIL < THRESHOLD )) # If utilization is lower than threshold, decrement counter
      then
        echo "$(date) - [WARNING] - GPU${GPU} under ${THRESHOLD}% threshold - UTILIZATION: ${UTIL}%" | tee -a ${LOG_FILE}
        COUNT=$((COUNT - 1))
        NUM_GPU_BLW_THRSHLD=$((NUM_GPU_BLW_THRSHLD + 1))
      fi
    fi

    sleep 0.5    # raise to 0.5 seconds delay until querying the next GPU to lower nvidia-smi impact
  done

  # If we found at least one GPU below the utilization threshold
  if (( NUM_GPU_BLW_THRSHLD > 0 ))
  then
    #echo "$(date) - Debug: NUM_GPU_BLW_THRSHLD=$NUM_GPU_BLW_THRSHLD, COUNT=$COUNT, RESTART=$RESTART, REBOOTRESET=$REBOOTRESET" | tee -a ${LOG_FILE}

  # Check Internet and pool only if all GPU utilizations are bellow threshold
    if (( NUM_GPU_BLW_THRSHLD = GPU_COUNT ))
    then

      #Check for Internet and wait if down
      echo "$(date) - [WARNING] - GPU under threshold, Checking Internet"
      if ! nc -vzw1 google.com 443;
      then
        echo "$(date) - [WARNING] - Internet is down, checking..." | tee -a ${LOG_FILE}
        INTERNET=0
        while ! nc -vzw1 google.com 443;
        do
          echo "$(date) - [WARNING] - Internet is down, checking again in 30 seconds..."
          ## While name resolution not working check ping and restart 3main if ping is ok.
          if ping -c1 8.8.8.8 &> /dev/null
          then
            echo "$(date) - [WARNING] - Ping ok, but problem in name resolution: restarting 3main" | tee -a ${LOG_FILE}
            pkill -f 3main
            exit
          fi
          sleep 30
        done
      else
        echo "Internet ok"
        INTERNET=1
      fi

      #When internet comes up, reset to skip additional checks until the next time through the loop
      if  nc -vzw1 google.com 443  && [[ $INTERNET == 0 ]]
      then
        echo "$(date) - [INFO] - Internet was down, Now it's ok" | tee -a ${LOG_FILE}
        REBOOTRESET=0; RESTART=0; COUNT=$((6 * GPU_COUNT)); INTERNET=1
        #### Now that internet comes up check miner and restart 3main if needed
        if [[ -z $(ps ax | grep -i screen | grep miner) ]]
        then
          echo "$(date) - [INFO] - miner is not running: restarting 3main"
          pkill -f 3main
          #wait for miner to start hashing
          sleep $SLEEP_TIME
        else
          echo "$(date) - [INFO] - miner is running: waiting $SLEEP_TIME seconds before going 'on watch'"
          sleep $SLEEP_TIME
        fi
      fi

      ######################## Beginning Pool Check

      source ${NVOC}/1bash

      if [[ $COIN == *DUAL* ]] ;   then
        COIN=$(echo $COIN| sed 's/DUAL_//' | cut -d _ -f 1)
        COIN_POOL=${COIN}_POOL
        COIN_PORT=${COIN}_PORT
        echo "$(date) - [INFO] - Dual Mining, Check main pool, ${!COIN_POOL}:${!COIN_PORT}"
        if ! nc -vzw1 ${!COIN_POOL} ${!COIN_PORT} ;   then
          echo "$(date) - [WARNING] - ${!COIN_POOL}:${!COIN_PORT} is Down" # | tee -a $LOG_FILE
          POOL=0
          while ! nc -vzw1 ${!COIN_POOL} ${!COIN_PORT} ;    do
            echo "$(date) - [WARNING] - Can not reach mining pool ${!COIN_POOL}:${!COIN_PORT} checking every 30 seconds..."
            sleep 30
          done
        else
          echo "$(date) - [INFO] - Mining Pool ${!COIN_POOL} ${!COIN_PORT} is up"
          POOL=1
        fi
        #If pool is up but was down before check if miner is running and give time out or start if not
        if  nc -vzw1 ${!COIN_POOL}t2 ${!COIN_PORT} && [[ $POOL == 0 ]] ;  then
          echo "$(date) - [INFO] - Mining Pool ${!COIN_POOL}:${!COIN_PORT} was down, Now it's ok"  # | tee -a $LOG_FILE
          #When pool comes up, reset counters to skip additional checks until the next time through the loop
          REBOOTRESET=0; RESTART=0; COUNT=$((6 * GPU_COUNT)); POOL=1
          if [[ -n $(ps ax | grep -i screen | grep miner| grep -v cpuminer) ]] ;    then
            echo "$(date) - [INFO] - Mining Pool ${!COIN_POOL}:${!COIN_PORT} is up now, and miner is running"
          elif  [[ -z $(ps ax | grep -i screen | grep miner | grep -v cpuminer) ]] ;   then
            echo "$(date) - [INFO] - Mining Pool ${!COIN_POOL} ${!COIN_PORT} is up now, but miner is not running: restarting 3main"
            pkill -f 3main
            sleep $SLEEP_TIME
          fi
        fi

      elif [[ ${AUTO_SWITCH:0:7} == SALFTER ]]
      then
        #Need Stubo check server codes
        echo ""

      elif [[ $COIN == *NICE* ]]
      then
        #Need Stubo check server codes
        echo ""

      else
        source ${NVOC}/1bash
        COIN_POOL=${COIN}_POOL
        COIN_PORT=${COIN}_PORT
        COIN_POOL_2=${COIN}_POOL_2
        COIN_PORT_2=${COIN}_PORT_2
        echo "$(date) - [INFO] - Check mining pool, ${!COIN_POOL}:${!COIN_PORT}"
        if  !  nc -vzw1 ${!COIN_POOL} ${!COIN_PORT} ;   then
          echo "$(date) - [WARNING] - ${!COIN_POOL}:${!COIN_PORT} is Down"  | tee -a $LOG_FILE
          POOL=0
          if [[ $ALT_POOL == YES ]] && [[ -n ${!COIN_POOL_2} ]]
          then
            guake -n 9poolswitch -r POOL_SWITCH -e "bash ${NVOC}/9poolswitch"
            sleep 300
          else
            while !  nc -vzw1 ${!COIN_POOL} ${!COIN_PORT} ;   do
              echo "$(date) - [WARNING] - Can not reach mining pool ${!COIN_POOL}:${!COIN_PORT} checking every 30 seconds..."
              sleep 30
            done
          fi
        else
          echo "$(date) - [INFO] - Mining Pool ${!COIN_POOL} ${!COIN_PORT} is up"
          POOL=1
        fi
        #If pool is up but was down before, check if miner is running and give time out or start if not
        if nc -vzw1 ${!COIN_POOL} ${!COIN_PORT} && [[ $POOL == 0 ]] ;   then
          echo "$(date) - [INFO] - Mining Pool ${!COIN_POOL}:${!COIN_PORT} was down, Now it's ok"  | tee -a $LOG_FILE
          #When pool comes up, reset counters to skip additional checks until the next time through the loop
          REBOOTRESET=0; RESTART=0; COUNT=$((6 * GPU_COUNT)); POOL=1
          if [[ -n $(ps ax | grep -i screen | grep miner| grep -v cpuminer) ]]
          then
            echo "$(date) - [INFO] - Mining Pool ${!COIN_POOL}:${!COIN_PORT} is up now, and miner is running"
          elif [[ -z $(ps ax | grep -i screen | grep miner | grep -v cpuminer) ]]
          then
            echo "$(date) - [WARNING] - Mining Pool ${!COIN_POOL} ${!COIN_PORT} is up now, but miner is not running: restarting 3main"
            pkill -f 3main
            sleep $SLEEP_TIME
          fi
        fi
      fi

      ######################## End of Pool Check
    fi

    # Look for no miner screen and get right to miner restart
    if ! ps ax | grep SCREEN | grep -v cpuminer | grep -q miner
    then
      COUNT=0
      echo "$(date) - [WARNING] - Found no miner: restarting 3main"
    fi

    # Percent of GPUs below threshold
    PCT_GPU_BAD=$((100 * NUM_GPU_BLW_THRSHLD / GPU_COUNT ))

    #  If we have had too many GPU below threshold over time OR
    #     we have ALL GPUs below threshold AND had at least (#GPUs + 1)
    #        occurrences of below threshold (2nd run through the loop
    #        to allow miner to fix itself)
    if (( COUNT < 1 )) || (( PCT_GPU_BAD == 100 )) && (( COUNT < 2 * GPU_COUNT ))
    then
      # Get some some diagnostics to the logs before restarting or rebooting
      echo "" | tee -a ${LOG_FILE}; echo "" | tee -a ${LOG_FILE}
      echo "$(date) - [WARNING] - Problem found, See diagnostics below: " | tee -a ${LOG_FILE}
      echo "$(date) - [WARNING] - Percent of GPUs bellow threshold: $PCT_GPU_BAD %"  | tee -a ${LOG_FILE}
      echo "$(nvidia-smi --query-gpu=name,pstate,temperature.gpu,fan.speed,utilization.gpu,power.draw,power.limit --format=csv)" | tee -a ${LOG_FILE}
      echo "$(date) - [INFO] - Miner last 15 logs:" | tee -a ${LOG_FILE}
      echo "$(tail -15 ${NVOC}/nvoc_logs/screenlog.0)" | tee -a ${LOG_FILE}

      # If we have had 4 miner restarts and still have low utilization
      if (( RESTART > 4 ))
      then
        echo "$(date) - [CRITICAL] - Utilization is too low: reviving did not work so restarting system in 10 seconds" | tee -a ${LOG_FILE}
        echo ""
        if [[ $TELEGRAM_ALERTS == YES ]]
        then
          bash "${NVOC}/telegram"
        fi
        sleep 10
        if [[ $SYSRQ_REBOOT == YES ]]
        then
          sudo bash ${NVOC}/sysrq_reboot.sh
        else
          sudo reboot
        fi
      fi

      echo "$(date) - [CRITICAL] - GPU Utilization is too low: restarting 3main..." | tee -a ${LOG_FILE}
      if [[ $TELEGRAM_ALERTS == YES ]]
      then
        bash "${NVOC}/telegram"
      fi
      # Kill the miner to be sure it's gone
      ps ax | grep -v cpuminer | grep SCREEN | grep miner | awk '"miner" {print $1}' | xargs kill
      # Best to restart 3main - settings might be adjusted already
      ps -ef | awk '$NF~"3main" {print $2}' | xargs kill

      RESTART=$((RESTART + 1))
      REBOOTRESET=0
      COUNT=$GPU_COUNT

      # Give 3main time to restart to prevent reboot
      sleep $SLEEP_TIME
      echo "$(date) - [INFO] - Back 'on watch' after miner restart"
    else
      echo "$(date) - [WARNING] - Low Utilization Detected: 3main will reinit if there are $COUNT consecutive failures"
      echo ""
    fi
    # No below threshold GPUs detected for this pass
  else
    # All is good, reset the counter
    COUNT=$((6 * GPU_COUNT))
    echo "$(date) - [INFO] - No mining issues detected, Check again in $WATCHDOG_CYCLE"
    echo " "
    # No need for a reboot after 5 times through the main loop with no issues
    if (( REBOOTRESET > 5 ))
    then
      RESTART=0
      REBOOTRESET=0
    fi
  fi
# Delay until next cycle
  sleep $WATCHDOG_CYCLE
done
